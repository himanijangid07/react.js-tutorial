Naming convention
- Always name the files in UpperCase
- Follow the proper library, and name the files accordingly. either jsx or js

For returning inside the functions
- Use fragments to return multiple components

In vite, it loads the script directly like adding the script tag in the index.html file
In react, it loads the script indirectly

When we write something like {username}, then it is called as evaluated expression, in which the outcome of the evaluated javascript is passed

Hooks are used in React to update the UI behind the scene, it makes it easier and reduces the task of user

Hydration : When the page loads for the first time, then we see buttons and images (like HTML), but they are not clickable, because at that time javascript is not loaded. Then, when the javascript loads and connect React with HTML, and everything becomes interactive, then this process is known as hydration. And this is good enough with fibre algorithm.

Reconciliation is the algorithm to compare two differing trees, and this is what popularly understood as "virtual DOM"

**Common Interview Question**
If we have code like this -> setCounter(counter+1) four times, then the counter value will increase only by one

But if we have code like this -> setCounter(prevCounter => prevCounter + 1) four times, then the counter value will increase by 4 at a time or at a single click

Difference between Link and NavLink
- Link is used in place of "a" tag in HTML, because "a" tag refreshes the whole page, but since in react, there is no refreshing of page, so we use Link tag
- NavLink provides additional things, apart from what Link provides

One optimized way of fetching data from APIs or making API calls is to use loader inside the Routes of the components. This, already starts the fetching, behind the scenes, even before the user clicks on a particular link.

Using the Outlet, which is provided by react-router-dom, we can do nesting, means, first we provided the layout route, and inside that we provided all our links.

To take the parameters from the url, we can pass it in the route, and then using the useParams hook of react, we can access that parameter from the url.

*** Context API in React ***
- Context is like a global variable, with which components can access the values and data without the other parent component, rendering the same data.
- While creating, a Context, we need to take care, that there is a provider also of Context, within which we declare the other components, and then those components can access the values and data.
- Context Provider file is a .jsx file, because it requires the fragments, within which we will include the components, and also it returns jsx, that's why this file will be a .jsx file.

Step 1: First, create a .js file, with the name of whatever Context you want. In that, import react, then declare a variable in which we create a Context, and then export that variable.

Step 2: Create the .jsx file of Context Provider, then wrap in the components inside the fragments, of the Context Provider, and pass the values, whatever we want either in the the form of objects.

Step 3: Import those files in the components wherever we want, and use them.